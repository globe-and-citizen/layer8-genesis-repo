// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: key_exchange.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KeyExchangeClient is the client API for KeyExchange service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeyExchangeClient interface {
	ExchangeKey(ctx context.Context, in *KeyExchangeRequest, opts ...grpc.CallOption) (*KeyExchangeResponse, error)
}

type keyExchangeClient struct {
	cc grpc.ClientConnInterface
}

func NewKeyExchangeClient(cc grpc.ClientConnInterface) KeyExchangeClient {
	return &keyExchangeClient{cc}
}

func (c *keyExchangeClient) ExchangeKey(ctx context.Context, in *KeyExchangeRequest, opts ...grpc.CallOption) (*KeyExchangeResponse, error) {
	out := new(KeyExchangeResponse)
	err := c.cc.Invoke(ctx, "/key_exchange.KeyExchange/ExchangeKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeyExchangeServer is the server API for KeyExchange service.
// All implementations must embed UnimplementedKeyExchangeServer
// for forward compatibility
type KeyExchangeServer interface {
	ExchangeKey(context.Context, *KeyExchangeRequest) (*KeyExchangeResponse, error)
	mustEmbedUnimplementedKeyExchangeServer()
}

// UnimplementedKeyExchangeServer must be embedded to have forward compatible implementations.
type UnimplementedKeyExchangeServer struct {
}

func (UnimplementedKeyExchangeServer) ExchangeKey(context.Context, *KeyExchangeRequest) (*KeyExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeKey not implemented")
}
func (UnimplementedKeyExchangeServer) mustEmbedUnimplementedKeyExchangeServer() {}

// UnsafeKeyExchangeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeyExchangeServer will
// result in compilation errors.
type UnsafeKeyExchangeServer interface {
	mustEmbedUnimplementedKeyExchangeServer()
}

func RegisterKeyExchangeServer(s grpc.ServiceRegistrar, srv KeyExchangeServer) {
	s.RegisterService(&KeyExchange_ServiceDesc, srv)
}

func _KeyExchange_ExchangeKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeyExchangeServer).ExchangeKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/key_exchange.KeyExchange/ExchangeKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeyExchangeServer).ExchangeKey(ctx, req.(*KeyExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeyExchange_ServiceDesc is the grpc.ServiceDesc for KeyExchange service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeyExchange_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "key_exchange.KeyExchange",
	HandlerType: (*KeyExchangeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeKey",
			Handler:    _KeyExchange_ExchangeKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "key_exchange.proto",
}
